{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///gundam_apps/bst-reel-viewer/src/app/api/upload/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport fs from 'fs';\nimport path from 'path';\nimport { spawn } from 'child_process';\n\nexport async function POST(req: NextRequest) {\n  const formData = await req.formData();\n  const file = formData.get('file') as File;\n  if (!file) {\n    return NextResponse.json({ error: 'No file uploaded' }, { status: 400 });\n  }\n\n  // Save the uploaded file to /tmp\n  const arrayBuffer = await file.arrayBuffer();\n  const buffer = Buffer.from(arrayBuffer);\n  const uploadPath = `/tmp/${file.name}`;\n  fs.writeFileSync(uploadPath, buffer);\n\n  // Call the Python script for analysis\n  const pythonProcess = spawn('python3', [\n    path.join(process.cwd(), 'src/lib/analyze_video.py'),\n    uploadPath\n  ]);\n\n  let result = '';\n  for await (const chunk of pythonProcess.stdout) {\n    result += chunk;\n  }\n\n  let error = '';\n  for await (const chunk of pythonProcess.stderr) {\n    error += chunk;\n  }\n\n  const exitCode = await new Promise((resolve) => {\n    pythonProcess.on('close', resolve);\n  });\n\n  console.log('Python script output:', result);\n  console.log('Python script error:', error);\n  console.log('Python script exit code:', exitCode);\n\n  if (exitCode !== 0) {\n    return NextResponse.json({ error: error || 'Python analysis failed' }, { status: 500 });\n  }\n\n  // Assume the Python script prints a JSON string with keywords\n  let keywords;\n  try {\n    keywords = JSON.parse(result);\n  } catch (e) {\n    return NextResponse.json({ error: 'Invalid response from analyzer' }, { status: 500 });\n  }\n\n  return NextResponse.json({ keywords });\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,KAAK,GAAgB;IACzC,MAAM,WAAW,MAAM,IAAI,QAAQ;IACnC,MAAM,OAAO,SAAS,GAAG,CAAC;IAC1B,IAAI,CAAC,MAAM;QACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAmB,GAAG;YAAE,QAAQ;QAAI;IACxE;IAEA,iCAAiC;IACjC,MAAM,cAAc,MAAM,KAAK,WAAW;IAC1C,MAAM,SAAS,OAAO,IAAI,CAAC;IAC3B,MAAM,aAAa,CAAC,KAAK,EAAE,KAAK,IAAI,EAAE;IACtC,6FAAA,CAAA,UAAE,CAAC,aAAa,CAAC,YAAY;IAE7B,sCAAsC;IACtC,MAAM,gBAAgB,CAAA,GAAA,mHAAA,CAAA,QAAK,AAAD,EAAE,WAAW;QACrC,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;QACzB;KACD;IAED,IAAI,SAAS;IACb,WAAW,MAAM,SAAS,cAAc,MAAM,CAAE;QAC9C,UAAU;IACZ;IAEA,IAAI,QAAQ;IACZ,WAAW,MAAM,SAAS,cAAc,MAAM,CAAE;QAC9C,SAAS;IACX;IAEA,MAAM,WAAW,MAAM,IAAI,QAAQ,CAAC;QAClC,cAAc,EAAE,CAAC,SAAS;IAC5B;IAEA,QAAQ,GAAG,CAAC,yBAAyB;IACrC,QAAQ,GAAG,CAAC,wBAAwB;IACpC,QAAQ,GAAG,CAAC,4BAA4B;IAExC,IAAI,aAAa,GAAG;QAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO,SAAS;QAAyB,GAAG;YAAE,QAAQ;QAAI;IACvF;IAEA,8DAA8D;IAC9D,IAAI;IACJ,IAAI;QACF,WAAW,KAAK,KAAK,CAAC;IACxB,EAAE,OAAO,GAAG;QACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiC,GAAG;YAAE,QAAQ;QAAI;IACtF;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE;IAAS;AACtC","debugId":null}}]
}